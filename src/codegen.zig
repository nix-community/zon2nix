const std = @import("std");
const Allocator = std.mem.Allocator;
const StringHashMap = std.StringHashMap;
const mem = std.mem;

const Dependency = @import("Dependency.zig");

const Entry = StringHashMap(Dependency).Entry;
const MetaEntry = StringHashMap([]const u8).Entry;

pub fn write(alloc: Allocator, out: anytype, meta: StringHashMap([]const u8), deps: StringHashMap(Dependency)) !void {
    try out.writeAll(
        \\# generated by zon2nix (https://github.com/nix-community/zon2nix)
        \\
        \\{ linkFarm, fetchzip }:
        \\
        \\(linkFarm "zig-packages" [
        \\
    );

    const len = deps.count();
    var entries = try alloc.alloc(Entry, len);
    var iter = deps.iterator();
    for (0..len) |i| {
        entries[i] = iter.next().?;
    }
    mem.sortUnstable(Entry, entries, {}, lessThan);

    for (entries) |entry| {
        const key = entry.key_ptr.*;
        const dep = entry.value_ptr.*;
        try out.print(
            \\  {{
            \\    name = "{s}";
            \\    path = fetchzip {{
            \\      url = "{s}";
            \\      hash = "{s}";
            \\    }};
            \\  }}
            \\
        , .{ key, dep.url, dep.nix_hash });
    }

    try out.writeAll("])");

    const meta_len = meta.count();
    if (meta_len > 0) {
        try out.writeAll(".overrideAttrs {\n  passthru.zonMeta = {\n");

        var meta_entries = try alloc.alloc(MetaEntry, meta_len);
        var meta_iter = meta.iterator();
        for (0..meta_len) |i| {
            meta_entries[i] = meta_iter.next().?;
        }
        mem.sortUnstable(MetaEntry, meta_entries, {}, metaLessThan);

        for (meta_entries) |entry| {
            const key = entry.key_ptr.*;
            const value = entry.value_ptr.*;

            try out.print(
                \\    "{s}" = "{s}";
                \\
            , .{ key, value });
        }

        try out.writeAll("  };\n}");
    }
    try out.writeAll("\n");
}

fn lessThan(_: void, lhs: Entry, rhs: Entry) bool {
    return mem.order(u8, lhs.key_ptr.*, rhs.key_ptr.*) == .lt;
}

fn metaLessThan(_: void, lhs: MetaEntry, rhs: MetaEntry) bool {
    return mem.order(u8, lhs.key_ptr.*, rhs.key_ptr.*) == .lt;
}
